#!/usr/bin/bpftrace

struct op {
    unsigned int first_attr_id;
    char first_val[44];
    unsigned int second_attr_id;
    char second_val[44];
    unsigned int third_attr_id;
    char third_val[44];
    unsigned int fourth_attr_id;
    char fourth_val[44];
    unsigned int fifth_attr_id;
    char fifth_val[44];
    unsigned int sixth_attr_id;
    char sixth_val[44];
};

/*API*/
uprobe:/usr/lib/libsai.so.1:check_attribs_metadata
{
      if (arg4 < 1) {
	printf("create obj %d attr_cnt %d attr1 %d ", arg2, arg0, ((op *) arg1)->first_attr_id);
        if (arg0 > 1) { printf("attr2 %d ", ((op *) arg1)->second_attr_id);}
        if (arg0 > 2) { printf("attr3 %d ", ((op *) arg1)->third_attr_id);}
        if (arg0 > 3) { printf("attr4 %d ", ((op *) arg1)->fourth_attr_id);}
        if (arg0 > 4) { printf("attr5 %d ", ((op *) arg1)->fifth_attr_id);}
        if (arg0 > 5) { printf("attr6 %d ", ((op *) arg1)->sixth_attr_id);}
        printf("\n");
      }
}

uprobe:/usr/lib/libsai.so.1:get_dispatch_attribs_handler
{
        printf("get obj %d %s attr_cnt %d attr1 %d ", arg2, str(arg5), arg0, ((op *) arg1)->first_attr_id);
        if (arg0 > 1) { printf("attr2 %d ", ((op *) arg1)->second_attr_id);}
        if (arg0 > 2) { printf("attr3 %d ", ((op *) arg1)->third_attr_id);}
        if (arg0 > 3) { printf("attr4 %d ", ((op *) arg1)->fourth_attr_id);}
        if (arg0 > 4) { printf("attr5 %d ", ((op *) arg1)->fifth_attr_id);}
        if (arg0 > 5) { printf("attr6 %d ", ((op *) arg1)->sixth_attr_id);}
        printf("\n");
        @start = nsecs;
}

uretprobe:/usr/lib/libsai.so.1:get_dispatch_attribs_handler
/@start/
{
        $api_latget = (nsecs - @start) / 1000;
        printf("get duration %lu us\n", $api_latget);
        delete(@start);
}

uprobe:/usr/lib/libsai.so.1:set_dispatch_attrib_handler
{
        printf("set obj %d %s attr %d\n", arg1, str(arg4), ((op *) arg0)->first_attr_id);
        @setstart = nsecs;
}

uretprobe:/usr/lib/libsai.so.1:set_dispatch_attrib_handler
/@setstart/
{
        $api_latset = (nsecs - @setstart) / 1000;
        printf("set duration %lu us\n", $api_latset);
        delete(@setstart);
}

uprobe:/usr/lib/libsai.so.1:mlnx_get_port_stats_ext
{
        printf("start port counters %lx %d\n", arg0, arg1);
        @portstart = nsecs;
}

uretprobe:/usr/lib/libsai.so.1:mlnx_get_port_stats_ext
/@portstart/
{
        $api_latport = (nsecs - @portstart) / 1000;
        printf("port counters duration %lu us\n", $api_latport);
        delete(@portstart);
}

uprobe:/usr/lib/libsai.so.1:mlnx_get_queue_statistics_ext
{
        printf("start queue counters %lx %d\n", arg0, arg1);
        @queuestart = nsecs;
}

uretprobe:/usr/lib/libsai.so.1:mlnx_get_queue_statistics_ext
/@queuestart/
{
        $api_latqueue = (nsecs - @queuestart) / 1000;
        printf("queue counters duration %lu us\n", $api_latqueue);
        delete(@queuestart);
}

