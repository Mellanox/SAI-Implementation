/* Copyright (C) 2017-present. Mellanox Technologies, Ltd. ALL RIGHTS RESERVED.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * flextum_types autogenerated by P4 Compiler v1.0
 * From bmtor on May 08, 2020 08:39AM
 */

#ifndef FLEXTRUM_TYPES_H_
#define FLEXTRUM_TYPES_H_

#include "fx_base_api.h"

#ifdef __cplusplus
extern "C"{
#endif

// Spectrum 1 specific HW limit
#define PORT_NUM 32
#define RIF_NUM 400 // TODO: max output for sdk_rif_iter_get
#define DEV_ID  1
// #define ACL_SIZE 100
#define NUM_OF_TC 8
#define NUM_OF_PRIO 8
#define MAX_TABLE_NAME_LEN 200

// Maps table name to P4 runtime table ID
// typedef uint32_t fx_table_id_t;
//     FX_TABLE_INVALID_ID = 0,
//---------FLEX tables------
static const fx_table_id_t CONTROL_IN_RIF_TABLE_BITMAP_CLASSIFICATION_ID = (fx_table_id_t)(33583305);
static const fx_table_id_t CONTROL_IN_RIF_TABLE_BITMAP_ROUTER_ID = (fx_table_id_t)(33606930);
static const fx_table_id_t CONTROL_OUT_RIF_TABLE_META_TUNNEL_ID = (fx_table_id_t)(33615147);
//---------FIXED tables------
//    FX_TABLE_MAX_ID = 0xFFFFFFFF

// Maps action name to P4 runtime action ID
typedef uint32_t fx_action_t;
//    FX_ACTION_INVALID_ID = 0,
static const fx_action_id_t CONTROL_IN_RIF_TO_LOCAL_ID = (fx_action_id_t)(16841981);
static const fx_action_id_t CONTROL_IN_RIF_TO_NEXTHOP_ID = (fx_action_id_t)(16825799);
static const fx_action_id_t CONTROL_OUT_RIF_TUNNEL_ENCAP_ID = (fx_action_id_t)(16812468);
static const fx_action_id_t NOACTION_ID = (fx_action_id_t)(16800567);
static const fx_action_id_t CONTROL_IN_RIF_DROP_ID = (fx_action_id_t)(16778278);
static const fx_action_id_t CONTROL_IN_RIF_SET_METADATA_ID = (fx_action_id_t)(16786535);

// Maps counter name to P4 runtime counter ID
typedef uint32_t fx_counter_t;

// TODO - Map remaining P4 types to a P4 runtime ID
// typedef uint32_t fx_packet_metadata_id_t;
// __INSERT_PACKET_METADATA_ID
// typedef uint32_t fx_action_profile_id_t;
// __INSERT_ACTION_PROFILE_ID
// typedef uint32_t fx_value_set_id_t;
// __INSERT_VALUE_SET_ID


// TODO
//---------action structs------
// struct action_noaction_t {
// }

// struct action_control_in_rif_set_metadata_t {
// 	bit<32>*		in_rif_metadata;
// }

// struct action_control_in_rif_to_nexthop_t {
// 	bit<32>*		next_hop;
// }

// struct action_control_in_rif_to_local_t {
// 	bit<32>*		router_interface;
// }

// struct action_control_in_rif_drop_t {
// }

// struct action_control_out_rif_tunnel_encap_t {
// 	bit<32>*		tunnel_id;
// 	bit<32>*		underlay_dip;
// 	bit<48>*		dst_mac;
// }


#ifdef __cplusplus
}
#endif

#endif
